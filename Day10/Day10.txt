[ 2차원 배열 ] 
[ 2차원 배열 다루기 ]
alt + shift + m 은 메소드 만들어줌
변수 전체 바꾸기는 alt + shift + r
4번 문제 
-> 초기화시에는 값이 0이라서 1만 넣어주면 됨!!
5번 문제 
-> i와 j를 이용하여 수식화해서 만들자!
6번 문제 
-> val지정 많은데 코드 줄여서 작성!
 
[ 문자열(String) ]
int, double, char와 반대로 String인 대문자로 시작
"Hello world" -> 문장
char는 'a'
자료형 = 
일반 자료형(primitive type) : int, double, char, long... 는 stack에 저장
+ 참조 자료형(reference type) : String, int[]... 공간이 stack에 생기지만, 값은 heap에 생김 
                                       주소만 stack에 있음. 즉, 참조하여 값을 찾아서 참조 자료형
String을 만들때, new로는 안좋음. 
haep안에 constant pool이 있는데 먼저 값 조회 후, 그 자리에 값이 있으면,
constant pool의 값을 가리킴. 즉, 주소값이 같아서 같다고 나옴.
String끼리의 비교는 == 을 쓰지 않는 것이 좋음.
== 비교는 stack 영역에 들어있는 주소잢을 비교한 것이다.
String 비교를 할 때는 .equals()를 사용해야 한다.
 
문자열을 이어붙혀야하는 경우는 +외에도 StringBuilder 또는 StringBuffer를 사용한다.
* 인터넷 검색하라아ㅏ..
숫자 -> 문자열
숫자 + 문자열 = 문자열
String.valueof()
문자열 -> 숫자
Integer.parseInt() / Integer.valueOf()
 
String 메소드 종류
charAt: n번째 인덱스에 무슨 문자가 있는가? -> char로 출력
contains: 특정 문자열이 문자열에 포함이 되어있는지 확인 -> bool로 출력
*중요* startsWith: 특정 문자열로 시작하는지 확인 -> bool로 출력
endsWith: 특정 문자열로 끝나는지 확인 -> bool로 출력
length: 문자열의 길이 확인. 알파벳이 몇 개인지
replace: 포함된 문자열 부분을 교체. 반드시 저장!! 무엇을 돌려주고 넣어주고 나오는지 알아야함!!!
           꼭 다시 저장해야한다!!대소문자 구별!
split: 특정 스트링을 기준으로 잘라서 배열에 넣는다. '.'은 주의해서 넣어라
substring: 문자열을 자른다. int 넣어야하고 String출력
 
String word = scan.next(); // 단어만! 입력
String sentence = scan.nextLine(); // 문장
단어만 쓸 시에는 nextLine()다시 안받아도 됨
